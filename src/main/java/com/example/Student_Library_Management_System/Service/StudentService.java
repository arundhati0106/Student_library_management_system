package com.example.Student_Library_Management_System.Service;

import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {
    @Autowired
    StudentRepository studentRepository;

    public String addStudent(Student student) {
        //basic attributes of student is set by user, in postman

        //cardStatus of card entity is not set
        //card should also be autogenerated when addStudent() is called
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED); //set enums -> activated

        //Student in card entity is not set
        card.setStudent(student);                 //to establish which card belongs to which student
                                                  //id of this student -> set as foreign key in this card

        //Card in student entity is not set
        student.setCard(card);

        //if it were unidirectional mapping -> had to save both parent and child class
        //since we are using bidirectional, we need not save child class, as its auto saved -> cascading effect
        studentRepository.save(student);

        return "Student and card added";
    }

    public String findNameByEmail(String email) {
        Student student = null;
        try {
            student = studentRepository.findByEmail(email);
        }
        catch(Exception e) { //make custom exception
            System.out.println("Entered email is not registered.");
        }
        return student.getName();
    }

    public String findNamesByCountry(String country) {
        List<Student> students = studentRepository.findByCountry(country);
        return "";
    }

    //we call existing student, and update only reqd params, instead of update the entire new
    //student, as that would result in data loss... null entries
    //params passed -> id , mobile, so rest params -> null, all attributes updated
    public String updateMobile(Student newStudent) {
        //fetch original data, existing data of student
        Student existingStudent = studentRepository.findById(newStudent.getId()).get();

        //keep other properties as it is, update only the required params
        existingStudent.setMobile(newStudent.getMobile());

        //update
        studentRepository.save(existingStudent);

        return "mobile of student " +existingStudent.getName() +" has been updated.";
    }

}
